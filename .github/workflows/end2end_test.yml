name: test
on:
  push:
    branches:
    - master
    - gitlab-cicd

jobs:
  build:
    runs-on: Ubuntu-20.04
    timeout-minutes: 120
    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        fetch-depth: 0 # otherwise will fail to push refs to dest repo
    - run: pip3 install docutils
    - run: git submodule update --init --recursive --remote
    - run: python3 generate_installation_script.py
    - run: ls RIC-Deployment
    - run: sudo swapoff -a
    - name: Install Dependencies
      run: |
          sudo apt install nfs-common
          sudo apt-get install build-essential cmake libfftw3-dev libmbedtls-dev libboost-program-options-dev libconfig++-dev libsctp-dev libtool autoconf
          sudo apt-get install libzmq3-dev
          sudo apt install libtool autoconf
          #sudo add-apt-repository ppa:ettusresearch/uhd
          #sudo apt-get update
          #sudo apt-get install libuhd-dev libuhd4.1.0 uhd-host
    - name: Install asn1c Compiler
      run: |
          git clone https://gitlab.eurecom.fr/oai/asn1c.git
          cd asn1c
          git checkout velichkov_s1ap_plus_option_group
          autoreconf -iv
          ./configure
          make -j`nproc`
          sudo make install
          sudo ldconfig
    - name: Install O-RAN Near Real-Time RIC
      run: |
          # Step 2: Install Kubernetes, Docker, and Helm (4 minutes)
          cd RIC-Deployment/tools/k8s/bin
          ./gen-cloud-init.sh 
          sudo ./k8s-1node-cloud-init-k_1_16-h_2_17-d_cur.sh
          sudo kubectl get pods -A
          sudo kubectl create ns ricinfra
          sudo helm install stable/nfs-server-provisioner --namespace ricinfra --name nfs-release-1
          sudo kubectl patch storageclass nfs -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
          # Step 3: Build Modified E2 docker Image (7 minutes)
          sudo docker run -d -p 5001:5000 --restart=always --name ric registry:2
          cd ../../../..
          cd ric-plt-e2
          cd RIC-E2-TERMINATION
          sudo docker build -f Dockerfile -t localhost:5001/ric-plt-e2:5.5.0 .
          sudo docker push localhost:5001/ric-plt-e2:5.5.0
          cd ../../
          # Step 4: Deploy the near-Real Time RIC (3 minutes)
          cd RIC-Deployment/bin
          sudo ./deploy-ric-platform -f ../RECIPE_EXAMPLE/PLATFORM/example_recipe_oran_e_release_modified_e2.yaml
    - name: Install srsRAN with E2 Agent
      run: |
          # compile srsRAN-e2 (19 minutes without running tests)
          cd srsRAN-e2
          mkdir build
          export SRS=`realpath .`
          cd build
          cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DRIC_GENERATED_E2AP_BINDING_DIR=${SRS}/e2_bindings/E2AP-v01.01 \
              -DRIC_GENERATED_E2SM_KPM_BINDING_DIR=${SRS}/e2_bindings/E2SM-KPM \
              -DRIC_GENERATED_E2SM_GNB_NRT_BINDING_DIR=${SRS}/e2_bindings/E2SM-GNB-NRT
          make -j2
          #make test
          sudo make install
          sudo ldconfig
          sudo srsran_install_configs.sh service # --force
    - name: Set up 5G Network
      run: |
          sudo bash setup5GNetwork.sh

    #- run: sudo bash setup5GNetwork.sh
    #- run: sudo bash deployKPIMON.sh
